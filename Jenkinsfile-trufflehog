pipeline {
    agent any

    environment {
        TRUFFLE_IMAGE = 'trufflesecurity/trufflehog:latest'
        TRUFFLE_REPORT = 'trufflehog_report.json'
        WORK_DIR = "${WORKSPACE}"
    }

    stages {

        stage('Preparaci√≥n - limpieza') {
            steps {
                echo "Workspace: ${WORKSPACE}"
                sh '''
                    rm -rf .trufflehog_test_repo
                    rm -f ${TRUFFLE_REPORT}
                '''
            }
        }

        stage('Checkout (si aplica)') {
            steps {
                echo "Si quieres escanear un repo real, descomenta checkout scm"
                // checkout scm
            }
        }

        stage('Crear repo de prueba con/ sin secreto (opcional)') {
            steps {
                script {
                    sh '''
                        mkdir -p .trufflehog_test_repo
                        cd .trufflehog_test_repo
                        git init
                        git config user.email "jenkins@example.com"
                        git config user.name "Jenkins Bot"

                        echo "archivo normal sin secreto" > README.md
                        git add README.md
                        git commit -m "init"
                    '''
                    echo "Repositorio de prueba creado en .trufflehog_test_repo"
                }
            }
        }

        stage('Insertar secreto a prop√≥sito (opcional)') {
            steps {
                script {
                    sh '''
                        cd .trufflehog_test_repo
                        echo "api_key = AKIAFAKEEXAMPLE123456" > secret.txt
                        git add secret.txt
                        git commit -m "add fake secret for trufflehog test"
                        git log --oneline -n 3
                    '''
                    echo "Secreto de prueba a√±adido al repo local"
                }
            }
        }

        stage('Scan con TruffleHog (stage propio)') {
            steps {
                script {
                    // Confirmamos que el repo exista
                    sh 'ls -la .trufflehog_test_repo'

                    // üîß Ejecutamos trufflehog en contenedor Docker (comillas simples -> evita error Groovy)
                    sh '''
                        set -o pipefail
                        docker run --rm \
                          -v $(pwd):/workspace \
                          -w /workspace \
                          trufflesecurity/trufflehog:latest \
                          filesystem --json /workspace/.trufflehog_test_repo > trufflehog_report.json || true
                    '''

                    echo "TruffleHog ejecutado, output en trufflehog_report.json"
                }
            }
        }

        stage('Analizar reporte y decidir resultado') {
            steps {
                script {
                    def findings = 0
                    try {
                        findings = sh(script: "grep -c 'DetectorType' trufflehog_report.json || true", returnStdout: true).trim()
                    } catch (err) {
                        echo "No se pudo leer el reporte JSON: ${err}"
                    }
                    echo "Cantidad de hallazgos detectados: ${findings}"

                    if (findings.toInteger() > 0) {
                        currentBuild.result = 'UNSTABLE'
                        echo "‚ö†Ô∏è Se detectaron secretos en el c√≥digo."
                    } else {
                        echo "‚úÖ No se detectaron secretos."
                    }
                }
            }
        }

        stage('Archivar reporte (persistir JSON en Jenkins)') {
            steps {
                archiveArtifacts artifacts: "trufflehog_report.json", onlyIfSuccessful: false
                echo "Reporte archivado como artefacto: trufflehog_report.json"
            }
        }

        stage('Remediaci√≥n autom√°tica (opcional)') {
            when {
                expression { currentBuild.result == 'UNSTABLE' }
            }
            steps {
                echo "Se detectaron secretos, remediaci√≥n autom√°tica pendiente (opcional)."
            }
        }
    }

    post {
        always {
            echo "Fin del pipeline. Revisa los artefactos (trufflehog_report.json) en la build."
        }
        failure {
            echo "Pipeline fallido."
        }
    }
}
