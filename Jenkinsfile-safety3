pipeline {
    agent any

    environment {
        FAIL_ON_SEVERITY = 'HIGH'    // CRITICAL, HIGH, MEDIUM, LOW
        SAFETY_API_KEY    = credentials('safety_api_key')
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/franpar410/pygoat.git'
            }
        }

        stage('Setup Python Environment') {
            steps {
                sh '''
                    docker run --rm -v $PWD:/src -w /src python:3.11 bash -c "
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install -r requirements.txt || echo 'No requirements.txt'
                        pip install safety
                    "
                '''
            }
        }

        stage('Build') {
            steps {
                echo 'üèóÔ∏è  Este es un build de prueba'
                sh 'echo "Hola desde Jenkins!"'
            }
        }

        /* ------------------------------ */
        /* üîç Software Composition Analysis (Safety) */
        /* ------------------------------ */
        stage('Software Composition Analysis (Safety)') {
            agent {
                docker {
                    image 'python:3.11'
                    // üëâ Se define el punto de entrada vac√≠o y el volumen de cach√© con permisos correctos
                    args '--entrypoint="" -v $PWD:/src -v $PWD/.safetycache:/root/.cache'
                }
            }

            steps {
                script {
                    sh '''
                        echo "üì¶ Ejecutando an√°lisis de dependencias con Safety..."

                        cd /src

                        # Crear carpetas necesarias con permisos correctos
                        mkdir -p .safetycache reports
                        chmod 777 .safetycache reports

                        # Instalar Safety
                        pip install --quiet safety

                        # Ejecutar an√°lisis y generar reportes JSON y SARIF
                        if [ -f requirements.txt ]; then
                            echo "‚ñ∂Ô∏è Analizando dependencias..."
                            safety check --file=requirements.txt --json > reports/safety.json || true
                            safety check --file=requirements.txt --sarif > reports/safety.sarif || true
                        else
                            echo "‚ö†Ô∏è No se encontr√≥ requirements.txt, se omitir√° el an√°lisis."
                        fi

                        # Subir resultados a la interfaz web de Safety (si hay API key)
                        if [ ! -z "$SAFETY_API_KEY" ]; then
                            echo "‚òÅÔ∏è Subiendo resultados a la interfaz web de Safety..."
                            safety auth login --key $SAFETY_API_KEY || true
                            safety report --file=requirements.txt --project pygoat || true
                        else
                            echo "‚ÑπÔ∏è No se configur√≥ SAFETY_API_KEY. Solo se generar√°n reportes locales."
                        fi
                    '''

                    // üìä Evaluar resultados
                    def reportFile = "${env.WORKSPACE}/reports/safety.json"
                    if (fileExists(reportFile)) {
                        def report = readJSON file: reportFile
                        def critical = 0
                        def high = 0
                        def medium = 0
                        def low = 0

                        report.issues.each { issue ->
                            def sev = issue.severity ?: 'LOW'
                            switch (sev.toUpperCase()) {
                                case 'CRITICAL': critical++; break
                                case 'HIGH': high++; break
                                case 'MEDIUM': medium++; break
                                case 'LOW': low++; break
                            }
                        }

                        echo "üîé Resultados Safety ‚Üí CRITICAL: ${critical}, HIGH: ${high}, MEDIUM: ${medium}, LOW: ${low}"

                        def shouldFail = false
                        switch (env.FAIL_ON_SEVERITY.toUpperCase()) {
                            case 'CRITICAL': shouldFail = (critical > 0); break
                            case 'HIGH': shouldFail = (critical > 0 || high > 0); break
                            case 'MEDIUM': shouldFail = (critical > 0 || high > 0 || medium > 0); break
                            case 'LOW': shouldFail = (critical > 0 || high > 0 || medium > 0 || low > 0); break
                        }

                        if (shouldFail) {
                            error("üö® Se encontraron vulnerabilidades de nivel ${env.FAIL_ON_SEVERITY} o superior. Bloqueando pipeline.")
                        } else {
                            echo "‚úÖ No se encontraron vulnerabilidades de nivel ${env.FAIL_ON_SEVERITY} o superior."
                        }
                    } else {
                        echo "‚ö†Ô∏è No se encontr√≥ el archivo de reporte de Safety."
                    }
                }
            }

            post {
                always {
                    echo 'üìÑ Archivando reportes de Safety...'
                    archiveArtifacts artifacts: 'reports/*.json, reports/*.sarif', fingerprint: true, allowEmptyArchive: true
                }
            }
        }

        stage('Deploy') {
            steps {
                sh 'echo "Deploying to environment..."'
            }
        }
    }

    post {
        always {
            echo 'üèÅ Pipeline finalizado.'
        }
    }
}
