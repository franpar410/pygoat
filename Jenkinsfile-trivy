pipeline {
    agent any

    environment {
        FAIL_ON_SEVERITY = 'HIGH'   // CRITICAL, HIGH, MEDIUM o LOW
        AUTO_REMEDIATE   = 'false'  // true = intentar remediar vulnerabilidades (no aplicable en Trivy CLI)
    }

    triggers {
        githubPush()
    }

    stages {
        /* ------------------------------ */
        /* 🔄 Checkout del repositorio    */
        /* ------------------------------ */
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/franpar410/pygoat.git'
            }
        }

        /* ------------------------------ */
        /* 🐍 Configuración de entorno Python */
        /* ------------------------------ */
        stage('Setup Python Environment') {
            steps {
                sh '''
                    docker run --rm -v $PWD:/src -w /src python:3.11 bash -c "
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install -r requirements.txt || echo 'No requirements.txt'
                    "
                '''
            }
        }

        /* ------------------------------ */
        /* 🏗️ Build básico                */
        /* ------------------------------ */
        stage('Build') {
            steps {
                echo '🏗️  Este es un build de prueba'
                sh 'echo "Hola desde Jenkins!"'
            }
        }

        /* ------------------------------ */
        /* 🔍 Escaneo de vulnerabilidades con Trivy */
        /* ------------------------------ */
        stage('Vulnerability Scan (Trivy)') {
            steps {
                script {
                    echo "🚀 Ejecutando análisis de vulnerabilidades con Trivy CLI (docker run)..."

                    sh '''
                        mkdir -p reports

                        echo "📦 Escaneando el proyecto con Trivy..."
                        docker run --rm \
                            -v $PWD:/workspace \
                            -w /workspace \
                            aquasec/trivy:latest fs . \
                            --security-checks vuln,config,secret \
                            --format json --output reports/trivy-report.json || true

                        docker run --rm \
                            -v $PWD:/workspace \
                            -w /workspace \
                            aquasec/trivy:latest fs . \
                            --security-checks vuln,config,secret \
                            --format sarif --output reports/trivy-report.sarif || true

                        echo "✅ Reportes generados en la carpeta reports/"
                    '''

                    // Analizar los resultados para aplicar política de bloqueo
                    def reportFile = "${env.WORKSPACE}/reports/trivy-report.json"
                    if (fileExists(reportFile)) {
                        def report = readJSON file: reportFile
                        def critical = 0
                        def high = 0
                        def medium = 0
                        def low = 0

                        if (report.Results) {
                            report.Results.each { result ->
                                result.Vulnerabilities?.each { vuln ->
                                    switch (vuln.Severity?.toUpperCase()) {
                                        case 'CRITICAL': critical++; break
                                        case 'HIGH': high++; break
                                        case 'MEDIUM': medium++; break
                                        case 'LOW': low++; break
                                    }
                                }
                            }
                        }

                        echo "🔎 Resultados Trivy → CRITICAL: ${critical}, HIGH: ${high}, MEDIUM: ${medium}, LOW: ${low}"

                        def shouldFail = false
                        switch (env.FAIL_ON_SEVERITY.toUpperCase()) {
                            case 'CRITICAL':
                                shouldFail = (critical > 0)
                                break
                            case 'HIGH':
                                shouldFail = (critical > 0 || high > 0)
                                break
                            case 'MEDIUM':
                                shouldFail = (critical > 0 || high > 0 || medium > 0)
                                break
                            case 'LOW':
                                shouldFail = (critical > 0 || high > 0 || medium > 0 || low > 0)
                                break
                        }

                        if (shouldFail) {
                            error("🚨 Se encontraron vulnerabilidades de nivel ${env.FAIL_ON_SEVERITY} o superior. Bloqueando pipeline.")
