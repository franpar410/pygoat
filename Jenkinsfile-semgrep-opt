pipeline {
    agent any

    environment {
        FAIL_ON_SEVERITY = 'HIGH'   // Cambia a CRITICAL, HIGH, MEDIUM o LOW seg√∫n tu pol√≠tica
        AUTO_REMEDIATE   = 'false'  // true = intentar remediar vulnerabilidades
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/franpar410/pygoat.git'
            }
        }

        stage('Setup Python Environment') {
            steps {
                sh '''
                    docker run --rm -v $PWD:/src -w /src python:3.11 bash -c "
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install -r requirements.txt || echo 'No requirements.txt'
                    "
                '''
            }
        }

        stage('Build') {
            steps {
                echo 'üèóÔ∏è  Este es un build de prueba'
                sh 'echo "Hola desde Jenkins!"'
            }
        }

        /* ------------------------------ */
        /* üîç Static Code Analysis (Semgrep) */
        /* ------------------------------ */
        stage('Static Code Analysis (Semgrep)') {
            agent {
                docker {
                    image 'returntocorp/semgrep:latest'
                    args '-v $WORKSPACE:/src'
                }
            }

            steps {
                script {
                    sh '''
                        echo "üì¶ Ejecutando an√°lisis est√°tico con Semgrep dentro de contenedor Docker..."

                        mkdir -p $WORKSPACE/reports
                        cd /src

                        # Ejecutar an√°lisis
                        semgrep --config auto --json --output $WORKSPACE/reports/semgrep-report.json || true
                        semgrep --config auto --sarif --output $WORKSPACE/reports/semgrep-report.sarif || true
                    '''

                    // Analizar resultados (bloquear pipeline seg√∫n severidad)
                    def reportFile = "${env.WORKSPACE}/reports/semgrep-report.json"
                    if (fileExists(reportFile)) {
                        def findings = readJSON file: reportFile
                        def critical = 0
                        def high = 0
                        def medium = 0
                        def low = 0

                        // Clasificar vulnerabilidades por severidad
                        findings.results.each { r ->
                            def sev = r.extra.severity ?: 'LOW'
                            switch (sev.toUpperCase()) {
                                case 'CRITICAL': critical++; break
                                case 'HIGH': high++; break
                                case 'MEDIUM': medium++; break
                                case 'LOW': low++; break
                            }
                        }

                        echo "üîé Resultados Semgrep ‚Üí CRITICAL: ${critical}, HIGH: ${high}, MEDIUM: ${medium}, LOW: ${low}"

                        // Pol√≠tica de bloqueo seg√∫n FAIL_ON_SEVERITY
                        def shouldFail = false
                        switch (env.FAIL_ON_SEVERITY.toUpperCase()) {
                            case 'CRITICAL':
                                shouldFail = (critical > 0)
                                break
                            case 'HIGH':
                                shouldFail = (critical > 0 || high > 0)
                                break
                            case 'MEDIUM':
                                shouldFail = (critical > 0 || high > 0 || medium > 0)
                                break
                            case 'LOW':
                                shouldFail = (critical > 0 || high > 0 || medium > 0 || low > 0)
                                break
                        }

                        if (shouldFail) {
                            error("üö® Se encontraron vulnerabilidades de nivel ${env.FAIL_ON_SEVERITY} o superior. Bloqueando pipeline.")
                        } else {
                            echo "‚úÖ No se encontraron vulnerabilidades de nivel ${env.FAIL_ON_SEVERITY} o superior."
                        }
                    } else {
                        echo "‚ö†Ô∏è No se encontr√≥ el archivo de reporte de Semgrep. Continuando sin bloqueo."
                    }

                    // Opcional: remediaci√≥n autom√°tica (experimental)
                    if (env.AUTO_REMEDIATE.toBoolean()) {
                        echo "üõ†Ô∏è Intentando aplicar remediaciones autom√°ticas..."
                        sh '''
                            # Semgrep puede sugerir fixes con la bandera --autofix (solo en algunas reglas)
                            cd /src
                            semgrep --config auto --autofix || true
                        '''
                        echo "‚úÖ Remediaci√≥n completada (si aplicaba)."
                    } else {
                        echo "‚ÑπÔ∏è Remediaci√≥n autom√°tica desactivada."
                    }
                }
            }

            post {
                always {
                    echo 'üìÑ Archivando reportes de Semgrep...'
                    archiveArtifacts artifacts: 'reports/*.json, reports/*.sarif', fingerprint: true, allowEmptyArchive: true
                }
            }
        }

        stage('Push to Registry (optional)') {
            when { expression { return false } }
            steps { sh 'echo "Pushing to Docker Registry..."' }
        }

        stage('Deploy') {
            steps { sh 'echo "Deploying to environment..."' }
        }
    }

    post {
        always {
            echo 'üèÅ Pipeline finalizado.'
        }
    }
}
