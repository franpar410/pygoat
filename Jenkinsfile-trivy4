pipeline {
    agent any

    environment {
        FAIL_ON_SEVERITY = 'HIGH'   // Pol√≠tica de fallo: CRITICAL, HIGH, MEDIUM, LOW
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/franpar410/pygoat.git'
            }
        }

        stage('Setup Python Environment') {
            steps {
                sh '''
                    docker run --rm -v $PWD:/src -w /src python:3.11 bash -c "
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install -r requirements.txt || echo 'No requirements.txt'
                    "
                '''
            }
        }

        stage('Build') {
            steps {
                echo 'üèóÔ∏è  Este es un build de prueba'
                sh 'echo "Hola desde Jenkins!"'
            }
        }

        /* ------------------------------ */
        /* üîç Vulnerability Scan (Trivy) */
        /* ------------------------------ */
        stage('Vulnerability Scan (Trivy)') {
            steps {
                script {
                    echo "üöÄ Ejecutando an√°lisis de vulnerabilidades con Trivy..."
        
                    sh '''
                        if ! docker image inspect aquasec/trivy:latest > /dev/null 2>&1; then
                            echo "üì• Descargando imagen de Trivy..."
                            docker pull aquasec/trivy:latest
                        fi
                    '''
        
                    withDockerContainer(
                        image: 'aquasec/trivy:latest',
                        args: '--entrypoint="" -u 0 -v $PWD/.trivycache:/root/.cache'
                    ) {
                        sh '''
                            echo "üì¶ Escaneando el c√≥digo fuente con Trivy..."
                            mkdir -p .trivycache reports
        
                            trivy fs . \
                                --scanners vuln,misconfig,secret \
                                --format json \
                                --output reports/trivy-report.json || true
        
                            trivy fs . \
                                --scanners vuln,misconfig,secret \
                                --format sarif \
                                --output reports/trivy-report.sarif || true
        
                            echo "‚úÖ Reportes generados en $(pwd)/reports"
                            ls -l reports || true
                        '''
                    }
        
                    // Validaci√≥n autom√°tica
                    def jsonReport = "${env.WORKSPACE}/reports/trivy-report.json"
                    def sarifReport = "${env.WORKSPACE}/reports/trivy-report.sarif"
        
                    if (!fileExists(jsonReport) || !fileExists(sarifReport)) {
                        error("üö® No se generaron los reportes de Trivy. Posible fallo en el an√°lisis o en la ruta de salida.")
                    }
        
                    echo "‚úÖ Reportes encontrados correctamente."
                }
            }
        
            post {
                always {
                    echo 'üìÑ Archivando reportes de Trivy...'
                    archiveArtifacts artifacts: 'reports/*.json, reports/*.sarif', fingerprint: true, allowEmptyArchive: false
                }
            }
        }


            post {
                always {
                    echo 'üìÑ Archivando reportes de Trivy...'
                    archiveArtifacts artifacts: 'reports/*.json, reports/*.sarif', fingerprint: true, allowEmptyArchive: false
                }
            }
        }

        stage('Push to Registry (optional)') {
            when { expression { return false } }
            steps {
                sh 'echo "Pushing to Docker Registry..."'
            }
        }

        stage('Deploy') {
            steps {
                sh 'echo "Deploying to environment..."'
            }
        }
    }

    post {
        always {
            echo 'üèÅ Pipeline finalizado.'
        }
    }
}
