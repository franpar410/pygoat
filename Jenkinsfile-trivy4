pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'pygoat-app'
        REPORT_DIR = 'reports'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/franpar410/pygoat.git'
            }
        }

        stage('Setup Python Environment') {
            steps {
                echo "üêç Configurando entorno Python..."
                sh '''
                    docker run --rm -v "$PWD":/src -w /src python:3.11 bash -c "
                        python3 -m venv venv && \
                        . venv/bin/activate && \
                        pip install -r requirements.txt || echo 'No requirements.txt'
                    "
                '''
            }
        }

        stage('Build') {
            steps {
                echo "üèóÔ∏è  Construyendo la aplicaci√≥n (simulado)..."
                sh 'echo Hola desde Jenkins!'
            }
        }

        stage('Vulnerability Scan (Trivy)') {
            steps {
                script {
                    echo "üöÄ Ejecutando an√°lisis de vulnerabilidades con Trivy..."

                    sh '''
                        if ! docker image inspect aquasec/trivy:latest > /dev/null 2>&1; then
                            echo "üì• Descargando imagen de Trivy..."
                            docker pull aquasec/trivy:latest
                        fi
                    '''

                    // Ejecutar Trivy como root con una cach√© montada localmente
                    withDockerContainer(
                        image: 'aquasec/trivy:latest',
                        args: '--entrypoint="" -u 0 -v $PWD/.trivycache:/root/.cache'
                    ) {
                        sh '''
                            echo "üì¶ Escaneando el c√≥digo fuente con Trivy..."
                            mkdir -p .trivycache ${REPORT_DIR}

                            # Escaneo en formato JSON
                            trivy fs . \
                                --scanners vuln,misconfig,secret \
                                --format json \
                                --output ${REPORT_DIR}/trivy-report.json || true

                            # Escaneo en formato SARIF
                            trivy fs . \
                                --scanners vuln,misconfig,secret \
                                --format sarif \
                                --output ${REPORT_DIR}/trivy-report.sarif || true

                            echo "‚úÖ Reportes generados en $(pwd)/${REPORT_DIR}"
                            ls -l ${REPORT_DIR} || true
                        '''
                    }

                    // Validaci√≥n de existencia de reportes
                    def jsonReport = "${env.WORKSPACE}/${REPORT_DIR}/trivy-report.json"
                    def sarifReport = "${env.WORKSPACE}/${REPORT_DIR}/trivy-report.sarif"

                    if (!fileExists(jsonReport) || !fileExists(sarifReport)) {
                        error("üö® No se generaron los reportes de Trivy. Posible fallo en el an√°lisis o en la ruta de salida.")
                    }

                    echo "‚úÖ Reportes generados correctamente."
                }
            }

            post {
                always {
                    echo 'üìÑ Archivando reportes de Trivy...'
                    archiveArtifacts artifacts: 'reports/*.json, reports/*.sarif', fingerprint: true, allowEmptyArchive: false
                }
            }
        }

        stage('Push to Registry (optional)') {
            when {
                expression { return false } // Desactivado por ahora
            }
            steps {
                echo "üöÄ Pushing imagen al registry (omitido en demo)"
            }
        }

        stage('Deploy') {
            when {
                expression { return false } // Desactivado por ahora
            }
            steps {
                echo "üö¢ Desplegando aplicaci√≥n (omitido en demo)"
            }
        }
    }

    post {
        always {
            echo "üèÅ Pipeline finalizado."
        }
    }
}
