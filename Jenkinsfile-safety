pipeline {
    agent any

    stages {
        stage('SCA-Safety') {
            agent {
                docker {
                    image 'python:3.11-slim'
                    args '-u root'
                }
            }
            steps {
                script {
                    echo "üîç Ejecutando an√°lisis de dependencias con Safety..."

                    // Instalar dependencias necesarias (para psycopg2 y build)
                    sh '''
                        apt-get update -qq
                        apt-get install -y --no-install-recommends build-essential libpq-dev
                        pip install --disable-pip-version-check -q safety psycopg2-binary
                    '''

                    // Instalar dependencias del proyecto si existe requirements.txt
                    sh 'if [ -f requirements.txt ]; then pip install --disable-pip-version-check -q -r requirements.txt; fi'

                    // Ejecutar Safety y guardar el reporte en el workspace de Jenkins
                    sh '''
                        safety check \
                          --full-report \
                          --json \
                          --output=$WORKSPACE/safety.json \
                          --file=requirements.txt || true
                    '''

                    // Evaluar resultados
                    def result = sh(script: "safety check --file=requirements.txt --exit-code", returnStatus: true)
                    if (result != 0) {
                        unstable(message: "‚ö†Ô∏è Vulnerabilidades detectadas por Safety")
                        // Si prefieres bloquear el pipeline:
                        // error("‚ùå Build bloqueado por vulnerabilidades cr√≠ticas detectadas por Safety")
                    }
                }
            }
        }

        stage('Compilation') {
            agent { docker { image 'php:8.2-cli' } }
            steps {
                sh 'echo "Compilando..."'
            }
        }

        stage('Build') {
            agent { docker { image 'php:8.2-cli' } }
            steps {
                sh 'echo "docker build -t my-php-app ."'
            }
        }

        stage('Deploy') {
            agent { docker { image 'php:8.2-cli' } }
            steps {
                sh 'echo "docker run my-php-app ."'
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'safety.json', fingerprint: true
        }
    }

}
