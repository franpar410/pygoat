pipeline {
    agent any

    stages {

        stage('SCA-Safety') {
            steps {
                script {
                    echo "🔍 Ejecutando análisis de dependencias con Safety dentro de contenedor..."

                    docker.image('python:3.11-slim').inside('--user root --volume /var/jenkins_home:/var/jenkins_home --workdir $WORKSPACE') {

                        // Instalamos dependencias del sistema necesarias para psycopg2 y compilación
                        sh '''
                            apt-get update -qq
                            apt-get install -y --no-install-recommends build-essential libpq-dev
                        '''

                        // Instalamos Safety
                        sh 'pip install --disable-pip-version-check -q safety'

                        // Instalamos dependencias del proyecto si existe requirements.txt
                        sh '''
                            if [ -f requirements.txt ]; then
                                echo "📦 Instalando dependencias desde requirements.txt..."
                                pip install --disable-pip-version-check -q -r requirements.txt
                            else
                                echo "⚠️ No se encontró requirements.txt, continuando..."
                            fi
                        '''

                        // Creamos carpeta para reportes y ejecutamos análisis con Safety
                        sh '''
                            mkdir -p reports
                            echo "🚀 Ejecutando análisis con Safety..."
                            safety check \
                                --full-report \
                                --json \
                                --output=reports/safety.json \
                                --file=requirements.txt || true

                            echo "✅ Contenido del directorio de reportes:"
                            ls -l reports
                        '''
                    }

                    // Evaluamos vulnerabilidades detectadas
                    def result = sh(script: "safety check --file=requirements.txt --exit-code", returnStatus: true)
                    if (result != 0) {
                        unstable(message: "⚠️ Vulnerabilidades detectadas por Safety")
                        // Si deseas que falle el pipeline, descomenta la siguiente línea:
                        // error("Build bloqueado por vulnerabilidades críticas detectadas por Safety")
                    }
                }
            }
        }

        stage('Compilation') {
            agent { docker { image 'php:8.2-cli' } }
            steps {
                sh 'echo "⚙️ Compilando aplicación..."'
            }
        }

        stage('Build') {
            agent { docker { image 'php:8.2-cli' } }
            steps {
                sh 'echo "🏗️ Construyendo imagen Docker..."'
                sh 'echo "docker build -t my-php-app ."'
            }
        }

        stage('Deploy') {
            agent { docker { image 'php:8.2-cli' } }
            steps {
                sh 'echo "🚀 Desplegando contenedor..."'
                sh 'echo "docker run my-php-app"'
            }
        }
    }

    post {
        always {
            echo "📦 Archivando artefactos..."
            archiveArtifacts artifacts: 'reports/safety.json', fingerprint: true
        }
        success {
            echo "✅ Pipeline completado correctamente."
        }
        unstable {
            echo "⚠️ Pipeline marcado como inestable debido a vulnerabilidades detectadas."
        }
        failure {
            echo "❌ Pipeline fallido."
        }
    }
}

