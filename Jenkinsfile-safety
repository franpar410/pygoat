pipeline {
    agent any

    environment {
        REPORT_DIR = "${WORKSPACE}/reports"
    }

    stages {

        stage('SCA-Safety') {
            steps {
                script {
                    echo "🔍 Ejecutando análisis de dependencias con Safety dentro de contenedor Python..."

                    // Ejecutamos Python dentro del mismo contexto del host Jenkins (DooD controlado)
                    docker.image('python:3.11-slim').inside('-v /var/run/docker.sock:/var/run/docker.sock -v /var/jenkins_home:/var/jenkins_home') {
                        sh '''
                            set -e
                            mkdir -p ${REPORT_DIR}

                            apt-get update -qq
                            apt-get install -y --no-install-recommends gcc libpq-dev > /dev/null

                            pip install --disable-pip-version-check -q safety

                            if [ -f requirements.txt ]; then
                                echo "📦 Instalando dependencias..."
                                pip install --disable-pip-version-check -q -r requirements.txt
                            else
                                echo "⚠️ No se encontró requirements.txt, creando uno temporal..."
                                echo "flask==2.0.1" > requirements.txt
                            fi

                            echo "🚀 Ejecutando análisis con Safety..."
                            safety check \
                                --full-report \
                                --json \
                                --output=${REPORT_DIR}/safety.json \
                                --file=requirements.txt || true

                            echo "✅ Reporte generado en: ${REPORT_DIR}/safety.json"
                            ls -l ${REPORT_DIR}
                        '''
                    }
                }
            }
        }

        stage('Compilation') {
            steps {
                echo "⚙️ Compilando aplicación..."
                sh 'sleep 1'
            }
        }

        stage('Build') {
            steps {
                echo "🏗️ Construyendo imagen Docker..."
                sh 'echo "docker build -t my-php-app ."'
            }
        }

        stage('Deploy') {
            steps {
                echo "🚀 Desplegando contenedor..."
                sh 'echo "docker run my-php-app"'
            }
        }
    }

    post {
        always {
            echo "📦 Archivando artefactos..."
            archiveArtifacts artifacts: 'reports/safety.json', fingerprint: true, allowEmptyArchive: false
        }
        success {
            echo "✅ Pipeline completado correctamente."
        }
        unstable {
            echo "⚠️ Pipeline marcado como inestable debido a vulnerabilidades detectadas."
        }
        failure {
            echo "❌ Pipeline fallido."
        }
    }
}
